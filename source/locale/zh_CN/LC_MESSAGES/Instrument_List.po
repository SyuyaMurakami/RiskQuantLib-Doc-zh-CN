# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../Instrument_List.rst:2
msgid "Instrument List"
msgstr ""

#: ../Instrument_List.rst:7
msgid ""
"``Instrument List`` is a collection of any class in RiskQuantLib, it "
"behaves like list in python. However, the difference is instrument list "
"is defined for each kind of instrument, any change to one won't influence"
" the others. For example, ``bond`` will have ``bondList``, ``stock`` will"
" have ``stockList``, if you build a new instrument called ``pandaBond``, "
"``pandaBondList`` will be created, too."
msgstr ""

#: ../Instrument_List.rst:9
msgid ""
"Any ``Instrument List`` has an atrribute named ``all`` to hold its "
"elements. It also owns default function to allow you to add new element "
"into this list, such as ``addBond`` and ``addBondSeries``. With these "
"function, you can add a single bond object into this list or add several "
"bonds into it."
msgstr ""

#: ../Instrument_List.rst:11
msgid ""
"``Instrument List`` allows duplicate elements. You can add one element "
"twice."
msgstr ""

#: ../Instrument_List.rst:13
msgid ""
"Usually, ``Instrument List`` will inherit from "
"``RiskQuantLib.Operation.operation.operation``, which is a class "
"containing all kinds of operations that can be done to list. You can read"
" `Operation Of List <https://riskquantlib-"
"doc.readthedocs.io/en/latest/RiskQuantLib.Operation.html#module-"
"RiskQuantLib.Operation.operation>`_ to know details."
msgstr ""

#: ../Instrument_List.rst:15
msgid ""
"Useful functions of instrument list includes ``groupBy``, ``filter``, "
"``execFunc``, ``apply``, ``join``, ``merge``, ``sort``, etc."
msgstr ""

#: ../Instrument_List.rst:17
msgid ""
"It is necessary to introduce some important properties of instrument list"
" here:"
msgstr ""

#: ../Instrument_List.rst:20
msgid "Add Element"
msgstr ""

#: ../Instrument_List.rst:22
msgid ""
"If ``pandaBondList`` is an instrument list, you can add instruments by "
"using ``addPandaBondSeries`` function: ::"
msgstr ""

#: ../Instrument_List.rst:28
msgid "You can also add one element by ``addPandaBond``: ::"
msgstr ""

#: ../Instrument_List.rst:34
msgid ""
"**Notice: The name of add function will change if you build different "
"instrument class, for example, if you built an instrument named "
"samuraiBond, this function will be** ``addSamuraiBond``."
msgstr ""

#: ../Instrument_List.rst:37
msgid "Mixed Index"
msgstr ""

#: ../Instrument_List.rst:39
msgid ""
"For python list, you can index an element if you know the number of its "
"position, for example, ``listA[2]`` will give you the third element. "
"However, in RiskQuantLib, index can be the number of position, or the "
"value of ``code`` attribute of that element, or any attribute name, or a "
"list of value of ``code`` attribute, or a list of attribute name. For "
"example: ::"
msgstr ""

#: ../Instrument_List.rst:67
msgid ""
"You may ask, what if the value of attribute ``code`` is the same with "
"some attribute name? Well, the best practice is not to let this happen. "
"If it happens, RiskQuantLib will treat it as the value of attribute "
"``code``, and gives you an single element whose attribute ``code`` equals"
" this value."
msgstr ""

#: ../Instrument_List.rst:70
msgid "Set Function"
msgstr ""

#: ../Instrument_List.rst:72
msgid ""
"Set function is a series of function used to set values of instrument "
"list. As you see above, we used "
"``rqlListA.setIssuer(['A','B','C'],['Tencent','HU JI FA','JIK&'])`` to "
"set the value of ``issuer`` attribtue. This function has two parameters, "
"``codeSeries`` and ``issuerNameSeries``, when you passed the value of "
"these two series, they are used as a dict. In this example, stock 'A' is "
"related to 'Tencent', stock 'B' is related to 'HU JI FA'. Here, the "
"length of passing paramter of set function **do not** have to be the same"
" with the length of instrument list. RiskQuantLib will skip those "
"elements whose ``code`` are not in the passed ``codeSeries``."
msgstr ""

#: ../Instrument_List.rst:75
msgid "Addition And Substraction"
msgstr ""

#: ../Instrument_List.rst:77
msgid "You can add or substract a instrument list to another, by: ::"
msgstr ""

#: ../Instrument_List.rst:83
msgid ""
"After this, all elements in B will be added to A or deleted from A. "
"However, any attribute of A won't be kept in C or D, only elements will "
"be changed. If you want C to keep the attribute of A, you should use: ::"
msgstr ""

#: ../Instrument_List.rst:90
msgid "Iteration"
msgstr ""

#: ../Instrument_List.rst:92
msgid ""
"If ``rqlListA`` is a stockList, and in "
"``RiskQuantLib.Instrument.Security.Stock.stock``, you defined an "
"attribute function like: ::"
msgstr ""

#: ../Instrument_List.rst:100
msgid ""
"If you need to iterate all elements and call this attribute function, you"
" should use ``execFunc`` like: ::"
msgstr ""

#: ../Instrument_List.rst:105 ../Instrument_List.rst:115
msgid "This is totally the same with: ::"
msgstr ""

#: ../Instrument_List.rst:111
msgid "You can also call it with parameters, like: ::"
msgstr ""

#: ../Instrument_List.rst:122
msgid "Selection"
msgstr ""

#: ../Instrument_List.rst:124
msgid ""
"If ``stockListA`` is a stockList, you want to select all elements whose "
"name contains letter 'HG', you can do it like: ::"
msgstr ""

#: ../Instrument_List.rst:129
msgid ""
"Here, ``filter`` is a function to select those elements you need, you can"
" pass a function to it, and it will return the elements which are "
"justified as ``True`` by the passed function."
msgstr ""

