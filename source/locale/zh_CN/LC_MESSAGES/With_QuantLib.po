# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../With_QuantLib.rst:2
msgid "With QuantLib"
msgstr ""

#: ../With_QuantLib.rst:7
msgid "Once upon a time, there is a famous ask in Stack Overflow:"
msgstr ""

#: ../With_QuantLib.rst:9
msgid ""
"`Why it is so complicated when using QuantLib for option pricing? Even if"
" I just want to price a vanilla option, it takes several lines to do it.`"
msgstr ""

#: ../With_QuantLib.rst:11
msgid ""
"It is true, if you use QuantLib to price a vanilla call option, you may "
"do it like: ::"
msgstr ""

#: ../With_QuantLib.rst:50
msgid ""
"However, what if you have ten options and you want to price them all? "
"What if you just want a test that show how your option value will be in "
"certain market situation? For research purpose or you are a real "
"derivative trader, you may sometimes have a table looks like:"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "OptionCode"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "PayOff"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "ExerciseType"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "ExerciseDate"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "StockPrice"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "RiskFreeRate"
msgstr ""

#: ../With_QuantLib.rst:53 ../With_QuantLib.rst:228
msgid "Sigma"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:230
msgid "A"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:57 ../With_QuantLib.rst:230
#: ../With_QuantLib.rst:232
msgid "PlainVanilla"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:57 ../With_QuantLib.rst:230
#: ../With_QuantLib.rst:232
msgid "European"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:230
msgid "2021-11-18"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:230
msgid "100.0"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:230
msgid "0.05"
msgstr ""

#: ../With_QuantLib.rst:55 ../With_QuantLib.rst:230
msgid "0.20"
msgstr ""

#: ../With_QuantLib.rst:57 ../With_QuantLib.rst:232
msgid "B"
msgstr ""

#: ../With_QuantLib.rst:57 ../With_QuantLib.rst:232
msgid "2022-03-20"
msgstr ""

#: ../With_QuantLib.rst:57 ../With_QuantLib.rst:232
msgid "97.6"
msgstr ""

#: ../With_QuantLib.rst:57 ../With_QuantLib.rst:232
msgid "0.032"
msgstr ""

#: ../With_QuantLib.rst:57 ../With_QuantLib.rst:232
msgid "0.17"
msgstr ""

#: ../With_QuantLib.rst:59
msgid "..."
msgstr ""

#: ../With_QuantLib.rst:62
msgid ""
"To do it in RiskQuantLib, we need to build our own european option "
"pricing template first, we create a project by using terminal command: ::"
msgstr ""

#: ../With_QuantLib.rst:67
msgid "After it, we open ``config.py``, and edit it like: ::"
msgstr ""

#: ../With_QuantLib.rst:74
msgid "Then we continue to add contents into ``config.py``: ::"
msgstr ""

#: ../With_QuantLib.rst:79
msgid "Then we build it by using terminal command: ::"
msgstr ""

#: ../With_QuantLib.rst:85
msgid ""
"Good, we now have a brand new project for european option pricing. "
"RiskQuantLib has created the instrument class, type class we need. We "
"need to change it a little bit for further use. We open "
"``RiskQuantLib/Property/QlExercise/qlExercise.py``, and make it look "
"like: ::"
msgstr ""

#: ../With_QuantLib.rst:107
msgid ""
"In this step, we package the QuantLib code of exercise, so that it can be"
" used even if we only pass a date to it. Once it is finished, we don't "
"need to define it every time we want to price an european option."
msgstr ""

#: ../With_QuantLib.rst:109
msgid ""
"Again, we do the similar thing to "
"``RiskQuantLib/Property/QlPayOff/qlPayOff.py``, and make it look like: ::"
msgstr ""

#: ../With_QuantLib.rst:130
msgid ""
"In this step, we package the QuantLib code of payoff, so that it can be "
"used even if we only pass a payoff value to it. Once it is finished, we "
"don't need to define it every time we want to price an european option."
msgstr ""

#: ../With_QuantLib.rst:132
msgid ""
"Again, we do the similar thing to "
"``RiskQuantLib/Property/QlQuote/qlQuote.py``, and make it look like: ::"
msgstr ""

#: ../With_QuantLib.rst:154
msgid ""
"The final preparation, is to edit "
"``RiskQuantLib/Instrument/Security/MyEuropeanOption/myEuropeanOption.py``,"
" to make it look like: ::"
msgstr ""

#: ../With_QuantLib.rst:193
msgid ""
"Now everything is ready, we switch to ``main.py`` in your project root "
"path, we can pricing the same option with RiskQuantLib, by: ::"
msgstr ""

#: ../With_QuantLib.rst:211
msgid ""
"It is more readable, right? More importantly, you can change the value of"
" any parameter and price it again. If you want to price another option, "
"just initialize another object: ::"
msgstr ""

#: ../With_QuantLib.rst:225
msgid ""
"Or do it in a more elegant way, which is to use RiskQuantLib list. "
"Remember you have a dataframe like:"
msgstr ""

#: ../With_QuantLib.rst:235
msgid ""
"We save it as an excel file named ``European_Option.xlsx`` in your "
"project root path. Then in ``main.py``, we code like:"
msgstr ""

#: ../With_QuantLib.rst:256
msgid ""
"If you want to save the result, the only thing you need to do is to "
"convert it to dataframe by: ::"
msgstr ""

#: ../With_QuantLib.rst:261
msgid ""
"**Do not forget to save your work to a template, this project can be used"
" again, this is the most important feature of RiskQuantLib.**"
msgstr ""

#: ../With_QuantLib.rst:263
msgid ""
"To do this, you should delete the file ``European_Option.xlsx``, and "
"clear the content of ``main.py``, because these data and operation are "
"not repeatable, only the logic behind could be used again. After this, "
"open a terminal and call: ::"
msgstr ""

#: ../With_QuantLib.rst:268
msgid "Next time you want to use it, just use terminal command: ::"
msgstr ""

