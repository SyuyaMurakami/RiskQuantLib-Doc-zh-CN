# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../Build_Project.rst:2
msgid "Build Your Project"
msgstr ""

#: ../Build_Project.rst:7
msgid ""
"After create a project, you should build it to suit for your mission. By "
"``Build``, RiskQuantLib will generate python source code automatically. "
"It is the core conception of RiskQuantLib. Before moving on, let specify "
"some definition in RiskQuantLib:"
msgstr ""

#: ../Build_Project.rst:9
msgid "``Build`` means generate source code automatically."
msgstr ""

#: ../Build_Project.rst:11
msgid ""
"``Instrument`` means any class you will use in your mission. For "
"financial analysis, ``Instrument`` refers to stock, bond or other "
"security type, or like interest rate or company, etc."
msgstr ""

#: ../Build_Project.rst:13
msgid ""
"Then we start to build our first project. The critical thing is to tell "
"RiskQuantLib how to build it. This is done by specify key word in "
"``config.py`` , which you can find in your project root dictionary once "
"you create a project. The content of building will be written into "
"``RiskQuantLib.Auto``."
msgstr ""

#: ../Build_Project.rst:15
msgid "In last chapter we create a project, it looks like: ::"
msgstr ""

#: ../Build_Project.rst:30
msgid "We will explain the function of each term as follows:"
msgstr ""

#: ../Build_Project.rst:33
msgid "RiskQuantLib"
msgstr ""

#: ../Build_Project.rst:35
msgid ""
"``RiskQuantLib`` is a dictionary holding all source files of "
"RiskQuantLib, it looks like: ::"
msgstr ""

#: ../Build_Project.rst:51
msgid "Src"
msgstr ""

#: ../Build_Project.rst:52
msgid ""
"``Src`` is a dictionary holding all source files that is needed in your "
"project. You can leave ``Src`` alone and never use it. It won't influence"
" your project at all. Or you can put any python source code in it, run or"
" import them as you always know in python, RiskQuantLib is also cool with"
" that. However, if you want to try some new things, ``Src`` will give you"
" a great way to manage your code."
msgstr ""

#: ../Build_Project.rst:54
msgid ""
"**In short, any code in** ``Src`` **can be parsed by RiskQuantLib "
"according to the comment in source code, the control comment syntax will "
"help to generate python code as you wish.**"
msgstr ""

#: ../Build_Project.rst:56
msgid ""
"The most simple way to control your code is to tell RiskQuantLib where "
"they should be insert. You can insert any code into any position of any "
"file as long as this file is under ``RiskQuantLib`` directory. If you "
"want to do this, use ``#->`` control comment."
msgstr ""

#: ../Build_Project.rst:58
msgid ""
"For example, you have a instrument class named as ``stock``, and you want"
" to add a class method to append a string ``_hello`` after the ``name`` "
"attribute, and mark the value as a new attribute named as ``greeting``. "
"You can go to ``RiskQuantLib/Instrument/Security/Stock.stock.py`` to add "
"this function: ::"
msgstr ""

#: ../Build_Project.rst:64
msgid ""
"This is usually what we do. But with ``Src``, you can do it another way. "
"First, create a file named ``greeting.py`` under ``Src``, then open it "
"and write: ::"
msgstr ""

#: ../Build_Project.rst:71
msgid ""
"Then close this file and open your terminal, change working directory "
"into current project, run: ::"
msgstr ""

#: ../Build_Project.rst:76
msgid ""
"And this function will be inserted into "
"``RiskQuantLib/Instrument/Security/Stock.stock.py`` automatically. Cool, "
"isn't it?"
msgstr ""

#: ../Build_Project.rst:78
msgid ""
"**For the automatically generated instrument by RiskQuantLib, use "
"instrument name will be enough to specify a target destination, like** "
"``#->stock``. **But if you create the source file by yourself, you should"
" use the absolute import path to tell RiskQuantLib where this file is, "
"like:** ``#->RiskQuantLib.Instrument.Security.Stock.stock``"
msgstr ""

#: ../Build_Project.rst:81
msgid "config.py"
msgstr ""

#: ../Build_Project.rst:83
msgid ""
"``config.py`` is the file to tell RiskQuantLib how to generate python "
"source code of instrument class. After calling ``build.py``, Any "
"instrument specified will be created, the source file will be added into "
"``RiskQuantLib`` dictionary besides its first RiskQuantLib parent class. "
"The default ``config.py`` looks like: ::"
msgstr ""

#: ../Build_Project.rst:97
msgid ""
"It might be a little confusing if we write it in above way, but it will "
"be more clear if we see it as a tree: ::"
msgstr ""

#: ../Build_Project.rst:112
msgid ""
"There are two basic kinds of keyword in ``config.py``, which is "
"``instrument`` and ``attribute`` , we will explain them here:"
msgstr ""

#: ../Build_Project.rst:115
msgid "*instrument*"
msgstr ""

#: ../Build_Project.rst:117
msgid ""
"The *instrument* key word can be used to define instrument by your will, "
"depending on your data. It is just a comment in python, but a little "
"special. To use it, the comment line has to start with ``#-|`` command "
"tag, and followed closely by ``instrument`` keyword, no space or other "
"characters in the middle. Finally, a ``:`` has to follow the "
"``instrument`` keyword. A validated command comment is like: ::"
msgstr ""

#: ../Build_Project.rst:122
msgid ""
"**You can use comma to seperate different instruments declaration, "
"like:** ::"
msgstr ""

#: ../Build_Project.rst:127
msgid ""
"**You can use @ to specify what parent instrument the current one is "
"inheriting from, like:** ::"
msgstr ""

#: ../Build_Project.rst:132
msgid ""
"**If an instrument has more than two parents, write them seperately "
"like:** ::"
msgstr ""

#: ../Build_Project.rst:137
msgid ""
"The instrument declared here will tell RiskQuantLib how to build your "
"project and add class files that will be used to form a data graph. For "
"example, if you write this in ``config.py`` : ::"
msgstr ""

#: ../Build_Project.rst:142
msgid ""
"RiskQuantLib will create instrument class source file ``treasureBond.py``"
" under ``RiskQuantLib.Instrument.Security.Bond.TreasureBond``, and create"
" list class source file ``treasureBondList.py`` under  "
"``RiskQuantLib.InstrumentList.SecurityList.BondList.TreasureBondList`` "
"after your run ``python build.py``."
msgstr ""

#: ../Build_Project.rst:144
msgid ""
"The @ means this new instrument will inherit from this RiskQuantLib "
"class. It can accept key word like: ``Fund``, ``Stock``, ``Bond``, "
"``Repo``, etc."
msgstr ""

#: ../Build_Project.rst:146
msgid ""
"**However, you should always inherit from a class that you have declared."
" It doesn't matter if you declare the parent class before or after this "
"line.**"
msgstr ""

#: ../Build_Project.rst:148 ../Build_Project.rst:187
msgid ""
"**You can not split this declaration into two lines using \\ or /. If you"
" want to start a new line, a new keyword must be used, like:** ::"
msgstr ""

#: ../Build_Project.rst:155
msgid "*attribute*"
msgstr ""

#: ../Build_Project.rst:157
msgid ""
"The *attribute* key word can be used to what kind of attributes you need "
"when analysising your data, and which class these attributes belong to. "
"After calling ``build.py``, any attributes specified here will be "
"registered and can be used with ``set`` function."
msgstr ""

#: ../Build_Project.rst:159
msgid ""
"This keyword is just a comment in python, but, as always, a little "
"special. To use it, the comment line has to start with ``#-|`` command "
"tag, and followed closely by ``attribute`` keyword, no space or other "
"characters in the middle. Finally, a ``:`` has to follow the "
"``attribute`` keyword. A validated command comment is like: ::"
msgstr ""

#: ../Build_Project.rst:164
msgid "This declaration will add ``yourAttribute`` to class ``fund`` ."
msgstr ""

#: ../Build_Project.rst:166
msgid ""
"**You can use comma to seperate different attributes declaration, like:**"
" ::"
msgstr ""

#: ../Build_Project.rst:171
msgid ""
"**You can use @ to specify what data type this attribute should have, "
"like:** ::"
msgstr ""

#: ../Build_Project.rst:176
msgid ""
"The default data type can be ``number``, ``string``, ``series``. It can "
"also be self-defined, actually you can use any word after @ to specify a "
"data type, if it doesn't exist, RiskQuantLib will create a new data type "
"and use the new one, like: ::"
msgstr ""

#: ../Build_Project.rst:181
msgid ""
"Data type tells RiskQuantLib what kind of data will be stored by this "
"attribute. If you add 'sellPrice' to ``stock``, this should be a "
"``number`` attribute, while an attribute like 'issuerName' is a "
"``string`` kind. ``series`` is used if it's an attribute like "
"'sellPriceOfPastSixMonth'. If you specify a kind that is never used "
"before, it will be created as a type class, located in "
"``RiskQuantLib.Property``."
msgstr ""

#: ../Build_Project.rst:183
msgid ""
"The data type here is not only a data type in RiskQuantLib. RiskQuantLib "
"is designed to be used to process graph-structure-data. Data type we "
"mentioned above is actually the ending-node of a graph, thus we'd better "
"call it ``property`` . We will explain it in later chapter."
msgstr ""

#: ../Build_Project.rst:185
msgid ""
"**You should add attribute to an instrument that is already declared, no "
"matter it is before or after.**"
msgstr ""

#: ../Build_Project.rst:194
msgid "*instrument-DefaultInstrumentType*"
msgstr ""

#: ../Build_Project.rst:196
msgid ""
"This key word is a string to mark your new instrument class. It is just a"
" label, does not actually influence the class behavior. An example is "
"like: ::"
msgstr ""

#: ../Build_Project.rst:202
msgid "*instrument-ParentQuantLibClassName*"
msgstr ""

#: ../Build_Project.rst:204
msgid ""
"This keyword means this new instrument will inherit from this QuantLib "
"class. It can accept key word like: ``Instrument``, ``Bond``, etc. You "
"can refer to QuantLib document to find what class QuantLib has. Like: ::"
msgstr ""

#: ../Build_Project.rst:210
msgid "*instrument-LibraryName*"
msgstr ""

#: ../Build_Project.rst:212
msgid ""
"The *LibraryName* is other library that you will use in instrument class "
"source file, like numpy and pandas. Like: ::"
msgstr ""

#: ../Build_Project.rst:218
msgid "build.py"
msgstr ""

#: ../Build_Project.rst:220
msgid ""
"``build.py`` is used to generate python source code automatically. After "
"you specify what kind of class you want to create, how it inherit from "
"other class, what attributes these class should have in *config.py*, you "
"can call *build.py* by terminal: ::"
msgstr ""

#: ../Build_Project.rst:225
msgid ""
"**Notice: If you do not use control comment syntax in Src, this build.py "
"will only need to be excuted once, at the begin of your project. Do not "
"build your project every time you run main.py, it is not necessary. But "
"if you use control comment in Src, you can use the following command so "
"that the build action will be triggered every time you make change to Src"
" directory:** ::"
msgstr ""

#: ../Build_Project.rst:230
msgid ""
"If your project is under development, it will be useful to use ``debug`` "
"mode. With this mode, the python source code in ``Src`` will not be "
"directly inserted into target file, it will be bound dynamically into "
"target file. By this way, the break point in file under ``Src`` will "
"start to effect, you can debug it directly. Surely, the ``auto build`` "
"mode can be run at the same time, it will automatically build the whole "
"project every time you make a change. To build project in automatically "
"debug mode, run: ::"
msgstr ""

#: ../Build_Project.rst:235
msgid "or just double click the file in windows system: ::"
msgstr ""

#: ../Build_Project.rst:241
msgid "main.py"
msgstr ""

#: ../Build_Project.rst:243
msgid ""
"``main.py`` is entrance of your project. You can start your coding here, "
"by: ::"
msgstr ""

#: ../Build_Project.rst:248
msgid "Then you can use the class directly by: ::"
msgstr ""

#: ../Build_Project.rst:253
msgid "You can also set attributes directly by: ::"
msgstr ""

#: ../Build_Project.rst:259
msgid ""
"For more information about the ``Instrument``, we will introduce it in "
"next chapter."
msgstr ""

#: ../Build_Project.rst:262
msgid "Data"
msgstr ""

#: ../Build_Project.rst:264
msgid "This is a folder just used to hold your data. Default as empty."
msgstr ""

#: ../Build_Project.rst:267
msgid "Cache"
msgstr ""

#: ../Build_Project.rst:269
msgid "This is a folder just used to hold your cache file. Default as empty."
msgstr ""

#: ../Build_Project.rst:272
msgid "Result"
msgstr ""

#: ../Build_Project.rst:274
msgid "This is a folder just used to hold your result file. Default as empty."
msgstr ""

#: ../Build_Project.rst:277
msgid "build.bat"
msgstr ""

#: ../Build_Project.rst:279
msgid ""
"After specifying all instruments and attributes in ``config.py`` , you "
"can double click ``build.bat`` to build your preoject. This file only "
"exists in windows system."
msgstr ""

#: ../Build_Project.rst:282
msgid "debug.bat"
msgstr ""

#: ../Build_Project.rst:284
msgid ""
"After specifying all instruments and attributes in ``config.py`` , you "
"can double click ``debug.bat`` to debug your preoject. This file only "
"exists in windows system."
msgstr ""

#: ../Build_Project.rst:286
msgid ""
"The difference between build and debug is debug mode import file in "
"``Src`` as a module, thus leads to different behaviors. You can find more"
" information about ``Src`` above."
msgstr ""

