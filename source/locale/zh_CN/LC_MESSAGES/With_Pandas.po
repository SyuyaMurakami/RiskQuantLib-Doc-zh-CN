# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../With_Pandas.rst:2
msgid "With Pandas"
msgstr ""

#: ../With_Pandas.rst:7
msgid ""
"When I am inspired to start RiskQuantLib project, my friend asked me one "
"question:"
msgstr ""

#: ../With_Pandas.rst:9
msgid "`Are you trying to design another pandas?`"
msgstr ""

#: ../With_Pandas.rst:11
msgid ""
"Well, I admit that in some way, RiskQuantLib is very similar to pandas, "
"but at the very beginning, RiskQuantLib is designed to be based on "
"pandas. It lies behind pandas because it is a data analysis core "
"concentrating on dealing with data process, rather than an integrated "
"tool to do things from data input to data output."
msgstr ""

#: ../With_Pandas.rst:13
msgid ""
"But later after the day we discussed this issue, I realized that to jump "
"out of the curse of pandas, I should get rid of more conventions. This "
"leads me to this place, where RiskQuantLib has its own functions for "
"iteration or merge, etc."
msgstr ""

#: ../With_Pandas.rst:15
msgid "However, there is one thing need to be noticed, that is:"
msgstr ""

#: ../With_Pandas.rst:17
msgid ""
"**RiskQuantLib is still based on pandas, it is not a substitute of "
"pandas, the best practice is to code your data process logic with "
"RiskQuantLib, and leave the rest to pandas.**"
msgstr ""

#: ../With_Pandas.rst:19
msgid ""
"For convience, RiskQuantLib provides with functions to interact with "
"pandas, we shall introduce them as follows:"
msgstr ""

#: ../With_Pandas.rst:22
msgid "From Pandas Series"
msgstr ""

#: ../With_Pandas.rst:24
msgid ""
"The most simple way to use pandas with RiskQuantLib is to use "
"pandas.Series, remember what we have shown before, if you have a "
"dataframe looks like:"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "OptionCode"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "PayOff"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "ExerciseType"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "ExerciseDate"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "StockPrice"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "RiskFreeRate"
msgstr ""

#: ../With_Pandas.rst:27 ../With_Pandas.rst:69 ../With_Pandas.rst:124
msgid "Sigma"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:71
msgid "A"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:31 ../With_Pandas.rst:71
#: ../With_Pandas.rst:73 ../With_Pandas.rst:102 ../With_Pandas.rst:104
#: ../With_Pandas.rst:126 ../With_Pandas.rst:128
msgid "PlainVanilla"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:31 ../With_Pandas.rst:71
#: ../With_Pandas.rst:73 ../With_Pandas.rst:102 ../With_Pandas.rst:104
#: ../With_Pandas.rst:126 ../With_Pandas.rst:128
msgid "European"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:71 ../With_Pandas.rst:102
#: ../With_Pandas.rst:126
msgid "2021-11-18"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:71
msgid "100.0"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:71
msgid "0.05"
msgstr ""

#: ../With_Pandas.rst:29 ../With_Pandas.rst:71
msgid "0.20"
msgstr ""

#: ../With_Pandas.rst:31 ../With_Pandas.rst:73
msgid "B"
msgstr ""

#: ../With_Pandas.rst:31 ../With_Pandas.rst:73 ../With_Pandas.rst:104
#: ../With_Pandas.rst:128
msgid "2022-03-20"
msgstr ""

#: ../With_Pandas.rst:31 ../With_Pandas.rst:73
msgid "97.6"
msgstr ""

#: ../With_Pandas.rst:31 ../With_Pandas.rst:73
msgid "0.032"
msgstr ""

#: ../With_Pandas.rst:31 ../With_Pandas.rst:73
msgid "0.17"
msgstr ""

#: ../With_Pandas.rst:33 ../With_Pandas.rst:75 ../With_Pandas.rst:106
#: ../With_Pandas.rst:130
msgid "..."
msgstr ""

#: ../With_Pandas.rst:36
msgid "After creating a project and building it with ``config.py``: ::"
msgstr ""

#: ../With_Pandas.rst:45
msgid "You can open the ``main.py`` and use it directly: ::"
msgstr ""

#: ../With_Pandas.rst:59
msgid ""
"We see here that ``set`` function in RiskQuantLib accept any iterable "
"object as parameters, including pandas.Series. Usually, ``set`` function "
"has two parameters, the first one should be the code used to identify "
"elements, the second one should be the value you want to set."
msgstr ""

#: ../With_Pandas.rst:62
msgid "From Pandas DataFrame"
msgstr ""

#: ../With_Pandas.rst:64
msgid ""
"You may ask, what if I have a dataframe that has thousands of columns? I "
"can't set them one by one, right?"
msgstr ""

#: ../With_Pandas.rst:66
msgid ""
"True, luckily, RiskQuantLib provides functions to read from "
"pandas.DataFrame. Suppose we still want to import the dataframe mentioned"
" before:"
msgstr ""

#: ../With_Pandas.rst:78
msgid "Now we build it by change ``Build_Attr.xlsx`` to: ::"
msgstr ""

#: ../With_Pandas.rst:87
msgid ""
"**Noticed here, we have all attribute names that are the same with "
"dataframe column names. This will help RiskQuantLib to identify column "
"and set them automatically.**"
msgstr ""

#: ../With_Pandas.rst:89
msgid "After building it, you can open the ``main.py`` and use it directly: ::"
msgstr ""

#: ../With_Pandas.rst:97
msgid ""
"Cool, isn't it? However, I won't suggest doing this, cause RiskQuantLib "
"is not meant to be bonded with single excel file. If you do it like this,"
" you will find that you may have another dataframe, whose column name is "
"not the same with this one, but its meaning is the same. For example, in "
"another dataframe ``df2``, it may looks like:"
msgstr ""

#: ../With_Pandas.rst:100
msgid "Code"
msgstr ""

#: ../With_Pandas.rst:100
msgid "Pay"
msgstr ""

#: ../With_Pandas.rst:100
msgid "Type"
msgstr ""

#: ../With_Pandas.rst:100
msgid "KDate"
msgstr ""

#: ../With_Pandas.rst:100
msgid "Price"
msgstr ""

#: ../With_Pandas.rst:100
msgid "RF"
msgstr ""

#: ../With_Pandas.rst:100
msgid "Vol"
msgstr ""

#: ../With_Pandas.rst:102 ../With_Pandas.rst:126
msgid "C"
msgstr ""

#: ../With_Pandas.rst:102 ../With_Pandas.rst:126
msgid "103.5"
msgstr ""

#: ../With_Pandas.rst:102 ../With_Pandas.rst:126
msgid "0.03"
msgstr ""

#: ../With_Pandas.rst:102 ../With_Pandas.rst:126
msgid "0.16"
msgstr ""

#: ../With_Pandas.rst:104 ../With_Pandas.rst:128
msgid "D"
msgstr ""

#: ../With_Pandas.rst:104 ../With_Pandas.rst:128
msgid "88.1"
msgstr ""

#: ../With_Pandas.rst:104 ../With_Pandas.rst:128
msgid "0.019"
msgstr ""

#: ../With_Pandas.rst:104 ../With_Pandas.rst:128
msgid "0.10"
msgstr ""

#: ../With_Pandas.rst:109
msgid ""
"If you want to add these contracts to your RiskQuantLib list, you should "
"use ``addFromDF``, rather than ``fromDF``: ::"
msgstr ""

#: ../With_Pandas.rst:114
msgid ""
"**However, because the column name in df2 is not the same with your "
"registered attribute, you will find the new elements that you added just "
"now don't have any attribute value.**"
msgstr ""

#: ../With_Pandas.rst:116
msgid ""
"There are two ways to solve this problem, you can change the name of "
"columns of df2 and update the elements, or mannually set the attribute "
"value by set function. We explain the first one as follows."
msgstr ""

#: ../With_Pandas.rst:119
msgid "Update With DataFrame"
msgstr ""

#: ../With_Pandas.rst:121
msgid "After you rename your df2, it looks like:"
msgstr ""

#: ../With_Pandas.rst:133
msgid ""
"Good, remember you have already added element C and D into "
"``vanillaOptionList``, we should update the attribute value of them. "
"Here, it is simple: ::"
msgstr ""

#: ../With_Pandas.rst:138
msgid ""
"After doing this, the information of contract C and D is updated, while A"
" and B are not changed. But it is necessary to mention here:"
msgstr ""

#: ../With_Pandas.rst:140
msgid ""
"**Try not to build your project based on data pattern, build it based on "
"analysis logic.**"
msgstr ""

#: ../With_Pandas.rst:142
msgid ""
"That is, when you design your project, you should forget all your input "
"files, forget what name the column is given, forget how many files you "
"would have, forget how you get these data or how you want to output and "
"show these data. You should try to think, what kind of intrument you "
"would use, how they are related with each other, what kind of attribute "
"you should use, could less attribute be used, what type of variable you "
"should use, why using self-defined types can simplicify your task, etc."
msgstr ""

#: ../With_Pandas.rst:145
msgid "To Pandas DataFrame"
msgstr ""

#: ../With_Pandas.rst:147
msgid "The most straight forward way to do it is: ::"
msgstr ""

#: ../With_Pandas.rst:152
msgid ""
"Where ``attributeList`` is a python list whose elements is the name "
"string of attribute. You can also pass an index when converting to "
"pandas.DataFrame, like: ::"
msgstr ""

#: ../With_Pandas.rst:157
msgid "Or, there is another easy way: ::"
msgstr ""

