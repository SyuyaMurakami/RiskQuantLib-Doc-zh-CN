# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../Variable_Type.rst:2
msgid "Variable Type"
msgstr ""

#: ../Variable_Type.rst:7
msgid ""
"Variable is the type of attribute, ususally it should be ``string``, "
"``number``, ``series``, ``any``. However, RiskQuantLib allows to build "
"your own variable type, for example, ``timeList``, or ``blank``, or "
"whatever you like."
msgstr ""

#: ../Variable_Type.rst:9
msgid ""
"This is a powerful design when you deal with some complicated situations."
" Somtimes, you may wonder why list in python doesn't have ``reduce`` "
"function any more, or you want to reload the ``__add__`` function of list"
" so that list objects can be added as you like. In RiskQuantLib, this is "
"done by defining your own variable type class."
msgstr ""

#: ../Variable_Type.rst:11
msgid ""
"The way to build your own type is to use ``config.py``, remember we have "
"a config file like: ::"
msgstr ""

#: ../Variable_Type.rst:16
msgid ""
"You specified variable type of *yourAttribute* is ``number``, and "
"variable type of *anotherAttribute* is ``string``. Now, we want to create"
" a type named ``yourNewType``, and let variable type of "
"*anotherAttribute* be ``yourNewType``. All we need to do is to change "
"``string`` to ``yourNewType``, and run ``build.py``, which is in your "
"project root path."
msgstr ""

#: ../Variable_Type.rst:18
msgid "The modified file should look like: ::"
msgstr ""

#: ../Variable_Type.rst:23
msgid ""
"Notice here that we don't have any pre-defined type class named "
"``yourNewType``, don't worry, RiskQuantLib will scan and create it if it "
"doesn't exist. After run ``build.py``, you could find the created file "
"``RiskQuantLib/Property/YourNewType/yourNewType.py``."
msgstr ""

#: ../Variable_Type.rst:25
msgid ""
"Same with instrument building, once the type class file is created, "
"RiskQuantLib can **not** delete it automatically. It can only be deleted "
"by your own hand. However, If it doesn't show in ``config.py``, after a "
"second building or after clear command, it will be un-registered from "
"RiskQuantLib, so that you can't use it with automatical building any "
"more."
msgstr ""

