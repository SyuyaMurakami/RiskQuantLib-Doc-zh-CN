# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2023.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2023-10-30 17:22+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../Instrument.rst:2
msgid "Instrument"
msgstr ""

#: ../Instrument.rst:7
msgid ""
"``Instrument`` is any class you will use in your mission. For financial "
"analysis, Instrument refers to stock, bond or other security type, or "
"like interest rate or company, etc."
msgstr ""

#: ../Instrument.rst:9
msgid ""
"If you choose to inherit from ``security`` in ``config.py``, Instrument "
"will be like security type. Or you inherit from ``index`` or "
"``interest``, etc. Instrument will be like what you choose. You can also "
"only declare the name of instrument, which means create a brand new "
"branch of class."
msgstr ""

#: ../Instrument.rst:11
msgid ""
"Any type of instrument should be initialized with ``code`` and ``name``, "
"``code`` behaves like index in pandas, ``name`` is the string to tell you"
" information of detail."
msgstr ""

#: ../Instrument.rst:13
msgid ""
"**Notice: code and name attribute is not totally the same, code will be "
"related to some function in instrument list.**"
msgstr ""

#: ../Instrument.rst:15
msgid ""
"By ``from RiskQuantLib.module import *``, any registered instrument will "
"be imported automatically. You can use it be create an object of that "
"class. If you create an Instrument called pandaBond, then use it like: ::"
msgstr ""

#: ../Instrument.rst:21
msgid ""
"Any instrument class has an optional attribute called type. When "
"initializing, you can pass a string to it, like: ::"
msgstr ""

#: ../Instrument.rst:26
msgid ""
"The main reason to use instrument class is to package your source code "
"into small block, and use or maintain them independently. This proved to "
"be effective when data processing is complicated or it is a team mission."
msgstr ""

#: ../Instrument.rst:28
msgid ""
"The path of any instrument is the path of their first RiskQuantLib parent"
" class. For example, if you inherit from ``Bond``, ``pandaBond`` will be "
"located at ``RiskQuantLib/Instrument/Security/Bond``, you should put all "
"source code about ``pandasBond`` in "
"``RiskQuantLib/Instrument/Security/Bond/PandaBond/pandaBond.py``"
msgstr ""

#: ../Instrument.rst:30
msgid ""
"If you change the content of "
"``RiskQuantLib/Instrument/Security/Bond/PandaBond/pandaBond.py``, your "
"change will be saved and no matter how many times you run ``python "
"build.py``, these content won't be affected. This allows you to build "
"intrument again and add new instrument, if you find mission changes."
msgstr ""

#: ../Instrument.rst:32
msgid ""
"**Notice: There is exceptions. If you change code in** "
"``RiskQuantLib/Instrument/Security/Bond/PandaBond/pandaBond.py`` **, you "
"should make sure your code does not lie between any insert tag. Insert "
"tag is used to specify the position of inserted code. It looks like:** ::"
msgstr ""

#: ../Instrument.rst:38
msgid ""
"**This is very similar as the tag in html, actually, RiskQuantLib can "
"help you to generate some code and insert them into target position. "
"Source code can only be inserted between tags. And any content between "
"tags can be dynamically replaced. This is why you should write your own "
"code outside of tags.**"
msgstr ""

#: ../Instrument.rst:40
msgid ""
"**Notice: However, any created instrument file will remain unless you "
"delete the class file manually.**"
msgstr ""

#: ../Instrument.rst:42
msgid ""
"**Notice: Instrument file can not be deleted automatically, but "
"instrument class can be un-registered. If you want to cancel the "
"registration of some instrument, you only need to remove its row in** "
"``config.py`` **and rebuild it. After this operation, you can not use it "
"directly by** ``from RiskQuantLib.module import *`` **or create another "
"instrument inheriting from this.**"
msgstr ""

