# SOME DESCRIPTIVE TITLE.
# Copyright (C)
# This file is distributed under the same license as the RiskQuantLib
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2021.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: RiskQuantLib \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2021-11-30 20:52+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../Instrument_List.rst:2
msgid "Instrument List"
msgstr "模板列表类"

#: ../Instrument_List.rst:7
msgid ""
"``Instrument List`` is a collection of any class in RiskQuantLib, it "
"behaves like list in python. However, the difference is instrument list "
"is defined for each kind of instrument, any change to one won't influence"
" the others. For example, ``bond`` will have ``bondList``, ``stock`` will"
" have ``stockList``, if you build a new instrument called ``pandaBond``, "
"``pandaBondList`` will be created, too."
msgstr "``Instrument List`` （模板列表类）是RiskQuantLib中，任何 ``Instrument`` （模板类）的实例的一个集合，"
"它非常类似于python自己的list，但模板列表类的每个元素都是一个模板类的实例。模板列表类与python默认list最大的差别在于，对于每一个模板类，"
"RiskQuantLib都会创建一个对应的模板列表类。当你更改其中任何一个模板列表类的时候，其他的模板列表类不会受到影响。比如， ``bond`` 会有一个对应的，名为 ``bondList`` 的模板列表类， ``stock`` 会有一个对应的名为 ``stockList`` 的模板列表类。如果你声明了一个新的模板类 ``pandaBond``，那么对应的，模板列表类 ``pandaBondList`` 也会被创建。"

#: ../Instrument_List.rst:9
msgid ""
"Any ``Instrument List`` has an atrribute named ``all`` to hold its "
"elements. It also owns default function to allow you to add new element "
"into this list, such as ``addBond`` and ``addBondSeries``. With these "
"function, you can add a single bond object into this list or add several "
"bonds into it."
msgstr "任何一个模板列表类 ``Instrument List`` 都拥有一个名为 ``all`` 的属性，这个属性用于"
"盛放所有的模板类的实例。模板列表类还拥有众多预置函数，允许你向模板列表中添加新的实例。这样的添加函数被称为add函数族，比如 ``bondList`` 就拥有 ``addBond`` 和 ``addBondSeries`` 两个用于新增元素的函数。"
"当你使用这两个函数的时候，你就可以向 ``bondList`` 中新增一个 ``bond`` 模板类的实例，或者新增好几个实例。"

#: ../Instrument_List.rst:11
msgid ""
"``Instrument List`` allows duplicate elements. You can add one element "
"twice."
msgstr "``Instrument List`` 允许盛放两个完全相同的元素，也就是说，你可以将同一个实例添加两次。"

#: ../Instrument_List.rst:13
msgid ""
"Usually, ``Instrument List`` will inherit from "
"``RiskQuantLib.Operation.listBaseOperation.listBase``, which is a class "
"containing all kinds of operations that can be done to list. You can read"
" `Operation Of List <https://riskquantlib-"
"doc.readthedocs.io/en/latest/RiskQuantLib.Operation.html#module-"
"RiskQuantLib.Operation.listBaseOperation>`_ to know details."
msgstr "通常情况下，``Instrument List`` 会继承自 ``RiskQuantLib.Operation.listBaseOperation.listBase``。这个名为listBase的类包含了所有用于对列表元素进行操作的函数。你可以阅读 `Operation Of List <https://riskquantlib-doc.readthedocs.io/en/latest/RiskQuantLib.Operation.html#module-RiskQuantLib.Operation.listBaseOperation>`_ 来获取更多信息。"

#: ../Instrument_List.rst:15
msgid ""
"Useful functions of instrument list includes ``groupBy``, ``filter``, "
"``execFunc``, ``apply``, ``join``, ``merge``, ``sort``, etc."
msgstr "模板列表类的一些有用的默认函数包括： ``groupBy``, ``filter``, "
"``execFunc``, ``apply``, ``join``, ``merge``, ``sort`` 等。"

#: ../Instrument_List.rst:17
msgid ""
"It is necessary to introduce some important properties of instrument list"
" here:"
msgstr "非常有必要在这里介绍一下模板列表类的重要属性："

#: ../Instrument_List.rst:20
msgid "Add Element"
msgstr "新增元素"

#: ../Instrument_List.rst:22
msgid ""
"If ``pandaBondList`` is an instrument list, you can add instruments by "
"using ``addPandaBondSeries`` function: ::"
msgstr "如果 ``pandaBondList`` 是一个模板列表类，你可以使用 ``addPandaBondSeries`` 来新增几个列表元素。新增的列表元素将是 ``pandaBond`` 模板类的实例。"

#: ../Instrument_List.rst:28
msgid "You can also add one element by ``addPandaBond``: ::"
msgstr "你也可以只增加一个元素，只需要使用 ``addPandaBond``：::"

#: ../Instrument_List.rst:34
msgid ""
"**Notice: The name of add function will change if you build different "
"instrument class, for example, if you built an instrument named "
"samuraiBond, this function will be** ``addSamuraiBond``."
msgstr "**注意：不同的模板列表类的add函数名称也是不一样的，如果你编译了一个名为 samuraiBond 的模板类，那么你应该使用** ``addSamuraiBond``。"

#: ../Instrument_List.rst:37
msgid "Mixed Index"
msgstr "混合索引"

#: ../Instrument_List.rst:39
msgid ""
"For python list, you can index an element if you know the number of its "
"position, for example, ``listA[2]`` will give you the third element. "
"However, in RiskQuantLib, index can be the number of position, or the "
"value of ``code`` attribute of that element, or any attribute name, or a "
"list of value of ``code`` attribute, or a list of attribute name. For "
"example: ::"
msgstr "对于python的默认list，如果你知道元素处于第几个，你可以很容易地索引元素，比如通过 ``listA[2]`` 这种方式你可以得到第三个元素。但在RiskQuantLib中，方括号中可以填写的不仅仅是一个表示位置的数字，也可以是某个元素的 ``code`` 属性的值，也可以是属性的名称，也可以是一个 ``code`` 属性的值的列表，或者属性的名称的列表。比如：::"

#: ../Instrument_List.rst:67
msgid ""
"You may ask, what if the value of attribute ``code`` is the same with "
"some attribute name? Well, the best practice is not to let this happen. "
"If it happens, RiskQuantLib will treat it as the value of attribute "
"``code``, and gives you an single element whose attribute ``code`` equals"
" this value."
msgstr "你可能会问，如果属性 ``code`` 的值碰巧和其他属性的名称相同，那么RiskQuantLib会如何处理这个索引任务呢？实际上如果这种情况出现，RiskQuantLib会认为这是一个 ``code`` 属性的值，并返回一个元素，这个元素 ``code`` 属性的值必须等于你传入的值。"

#: ../Instrument_List.rst:70
msgid "Set Function"
msgstr "Set函数族"

#: ../Instrument_List.rst:72
msgid ""
"Set function is a series of function used to set values of instrument "
"list. As you see above, we used "
"``rqlListA.setIssuer(['A','B','C'],['Tencent','HU JI FA','JIK&'])`` to "
"set the value of ``issuer`` attribtue. This function has two parameters, "
"``codeSeries`` and ``issuerNameSeries``, when you passed the value of "
"these two series, they are used as a dict. In this example, stock 'A' is "
"related to 'Tencent', stock 'B' is related to 'HU JI FA'. Here, the "
"length of passing paramter of set function **do not** have to be the same"
" with the length of instrument list. RiskQuantLib will skip those "
"elements whose ``code`` are not in the passed ``codeSeries``."
msgstr "Set函数族是用于为模板列表类的元素设定属性的多个函数的统一称呼。正如你在上面的例子中看见的，我们使用 ``rqlListA.setIssuer(['A','B','C'],['Tencent','HU JI FA','JIK&'])`` 来为rqlListA的元素设定  ``issuer`` 这个属性。通常，Set函数族中的函数都有两个参数需要传入，在这个例子里，是 ``codeSeries`` 和 ``issuerNameSeries``。你应当为这两个参数分别传入一个可迭代对象，比如list。当你传入两个list后，他们的元素会建立一个一一对应的关系。  ``codeSeries`` 的第一个元素对应 ``issuerNameSeries`` 的第一个元素， ``codeSeries`` 的第二个元素对应 ``issuerNameSeries`` 的第二个元素，以此类推，所以理论上，这两个list1的长度应该是相同的。在这个例子里，股票A和Tencent对应，股票B和HU JI FA对应。需要注意的是，传入的list的长度不一定需要等于模板列表类的长度，如果你传入的  ``codeSeries`` 的列表长度比模板列表的长度短，那么那些没有出现在传入列表里的元素会被跳过，其属性会被设定为空。"

#: ../Instrument_List.rst:75
msgid "Addition And Substraction"
msgstr "模板列表的加减"

#: ../Instrument_List.rst:77
msgid "You can add or substract a instrument list to another, by: ::"
msgstr "你可以把两个模板列表相加或者相减。比如：::"

#: ../Instrument_List.rst:83
msgid ""
"After this, all elements in B will be added to A or deleted from A. "
"However, any attribute of A won't be kept in C or D, only elements will "
"be changed. If you want C to keep the attribute of A, you should use: ::"
msgstr "在这样操作之后，所有B列表的元素都会被加入A列表，或者从A列表中删除。但是，A列表的属性并不会被保留在结果C或者D中，只有元素被保留。如果你需要C保留A的属性，你应该这样使用：::"

#: ../Instrument_List.rst:90
msgid "Iteration"
msgstr "遍历"

#: ../Instrument_List.rst:92
msgid ""
"If ``rqlListA`` is a stockList, and in "
"``RiskQuantLib.Security.Stock.stock``, you defined an attribute function "
"like: ::"
msgstr "如果  ``rqlListA`` 是一个股票列表，在 ``RiskQuantLib.Security.Stock.stock`` 中，你这样定义了一个类函数：::"

#: ../Instrument_List.rst:100
msgid ""
"If you need to iterate all elements and call this attribute function, you"
" should use ``execFunc`` like: ::"
msgstr "如果你需要遍历模板列表的元素，对每一个元素执行这个自定义函数，那么你应该使用  ``execFunc``，像这样：::"

#: ../Instrument_List.rst:105 ../Instrument_List.rst:115
msgid "This is totally the same with: ::"
msgstr "这完全相当于：::"

#: ../Instrument_List.rst:111
msgid "You can also call it with parameters, like: ::"
msgstr "你也可以在调用这个函数的时候传入参数，比如：::"

#: ../Instrument_List.rst:122
msgid "Selection"
msgstr "筛选"

#: ../Instrument_List.rst:124
msgid ""
"If ``stockListA`` is a stockList, you want to select all elements whose "
"name contains letter 'HG', you can do it like: ::"
msgstr "如果  ``rqlListA`` 是一个股票列表，你想要选择其中name属性的值包含了HG这个字符串的元素，你可以这样使用：::"

#: ../Instrument_List.rst:129
msgid ""
"Here, ``filter`` is a function to select those elements you need, you can"
" pass a function to it, and it will return the elements which are "
"justified as ``True`` by the passed function."
msgstr "这里，``filter`` 函数被用于选择那些符合你条件的元素。你可以传入一个函数，这个函数接受一个参数（在这个例子里是x），这个参数代表了模板列表类的元素（在这个例子中是 ``stock`` 模板类），通过对这个元素进行运算（这个例子中是 ``x.name.find('HG')!=-1`` ），这个函数应该返回一个bool类型的值，即 ``True`` 或者 ``False``。``filter`` 函数即返回所有符合 ``True`` 的元素。"

